#!/bin/bash
#
# Delete a site and all of its files on disk

# Ensure running as root
if [ "$(id -u)" -ne 0 ]; then
    echo 'This script is designed to run as root'
    exit 1
fi

# Check arguments
if [ $# -lt 1 ]; then
    echo 'Syntax: delete-site <site-name>'
    exit 1
fi

# Confirm by user
read -rp "Are you sure you want to delete the site and all of its files including any database? Type yes to confirm: "
if [[ ! $REPLY =~ ^[Yy]es$ ]]; then
    exit 1
fi

# Determine site information. Find domain name of site by searching and extracting from nginx configuration.
SITENAME=$1
SITEDOMAIN=$(grep -m 1 "server_name" /etc/nginx/sites-available/$SITENAME.conf | grep -Pzo "server_name \K(.+?)(?=;)")
DBNAME=$SITENAME
if [ -z "$SITEDOMAIN" ]; then
    echo "Could not find domain name of site from nginx configuration. Nothing has been deleted!"
    exit 1
fi

# Delete systemd service for dotnet applications
if [ -f /etc/systemd/system/kestrel-$SITENAME.service ]; then
    systemctl stop kestrel-$SITENAME.service
    rm /etc/systemd/system/kestrel-$SITENAME.service
fi

# Delete pm2 app for node applications
if [ -f /var/www/$SITENAME/app.js ]; then
    pm2 delete $SITENAME
fi

# Delete existing files
if [ -f /etc/nginx/sites-enabled/$SITENAME.conf ]; then
    rm /etc/nginx/sites-enabled/$SITENAME.conf
fi
if [ -f /etc/nginx/sites-available/$SITENAME.conf ]; then
    rm /etc/nginx/sites-available/$SITENAME.conf
fi
if [ -d /var/www/$SITENAME ]; then
    rm -R /var/www/$SITENAME
fi

# Check that nginx is happy with configuration
nginx -t 2> /dev/null
if [ $? -ne 0 ]; then
    echo 'Nginx reported error in configuration'
    nginx -t
    exit 1
fi
nginx -s reload

# Remove possible user and database from MariaDB
mysql -u root -e "DROP USER IF EXISTS '${DBNAME}user'@'localhost';"
mysql -u root -e "DROP DATABASE IF EXISTS $DBNAME;"

# Delete certificate from Letsencrypt
certbot delete --cert-name $SITEDOMAIN

echo "Deleted site $SITENAME"

